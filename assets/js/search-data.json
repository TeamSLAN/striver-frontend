{
  
    
        "post0": {
            "title": "EXAMPLE",
            "content": "Quote . Get new quote . . Like . N/A . Dislike . N/A .",
            "url": "/striver-frontend/markdown/2022/11/01/EXAMPLE.html",
            "relUrl": "/markdown/2022/11/01/EXAMPLE.html",
            "date": " • Nov 1, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Striver App",
            "content": "Quote . Get new quote . . Like . N/A . Dislike . N/A .",
            "url": "/striver-frontend/markdown/2022/10/23/striver-post.html",
            "relUrl": "/markdown/2022/10/23/striver-post.html",
            "date": " • Oct 23, 2022"
        }
        
    
  

  
  
      ,"page0": {
          "title": "About",
          "content": "This site is built by Safin, Leo, Alex, and Navan .",
          "url": "/striver-frontend/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
      ,"page2": {
          "title": "",
          "content": "Striver . . &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot; /&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot; /&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot; /&gt; &lt;!-- CSS only --&gt; &lt;link href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/css/bootstrap.min.css&quot; rel=&quot;stylesheet&quot; integrity=&quot;sha384-Zenh87qX5JnK2Jl0vWa8Ck2rdkQ2Bzep5IDxbcnCeuOxjzrPF/et3URy9Bv1WTRi&quot; crossorigin=&quot;anonymous&quot; /&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/bootstrap-icons@1.9.1/font/bootstrap-icons.css&quot; /&gt; &lt;title&gt;Document&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;div class=&quot;container mt-3&quot;&gt; &lt;div class=&quot;row&quot;&gt; &lt;div class=&quot;col-sm&quot;&gt; &lt;h1&gt;Striver&lt;/h1&gt; &lt;p&gt;Safin, Leo, Alex, Navan | Mortensen Period 4&lt;/p&gt; &lt;button type=&quot;button&quot; class=&quot;btn btn-primary&quot; onclick=&quot;getQuote()&quot;&gt; Get new quote &lt;/button&gt; &lt;figure class=&quot;mt-3&quot;&gt; &lt;blockquote class=&quot;blockquote&quot;&gt; &lt;p id=&quot;quote&quot;&gt;&lt;/p&gt; &lt;/blockquote&gt; &lt;figcaption class=&quot;blockquote-footer&quot; id=&quot;quoteAuthor&quot;&gt;&lt;/figcaption&gt; &lt;/figure&gt; &lt;button type=&quot;button&quot; class=&quot;btn btn-success&quot; onclick=&quot;incrementLikes()&quot;&gt; &lt;span id=&quot;likeCount&quot;&gt;N/A&lt;/span&gt; &lt;i class=&quot;bi bi-hand-thumbs-up-fill&quot;&gt;&lt;/i&gt; &lt;/button&gt; &lt;button type=&quot;button&quot; class=&quot;btn btn-danger&quot; onclick=&quot;incrementDislikes()&quot;&gt; &lt;span id=&quot;dislikeCount&quot;&gt;N/A&lt;/span&gt; &lt;i class=&quot;bi bi-hand-thumbs-down-fill&quot;&gt;&lt;/i&gt; &lt;/button&gt; &lt;/div&gt; &lt;div class=&quot;col-sm&quot;&gt; &lt;h2&gt;Add a comment&lt;/h2&gt; &lt;form id=&quot;commentForm&quot; action=&quot;#commentsh2&quot;&gt; &lt;div class=&quot;mb-3&quot;&gt; &lt;input type=&quot;text&quot; id=&quot;commentName&quot; placeholder=&quot;Name&quot; class=&quot;form-control&quot; /&gt; &lt;/div&gt; &lt;div class=&quot;mb-3&quot;&gt; &lt;textarea class=&quot;form-control&quot; placeholder=&quot;Your comment&quot; id=&quot;commentText&quot; &gt;&lt;/textarea&gt; &lt;/div&gt; &lt;div class=&quot;mb-3&quot;&gt; &lt;input type=&quot;submit&quot; onclick=&quot;submitComment()&quot; class=&quot;btn btn-primary&quot; /&gt; &lt;/div&gt; &lt;/form&gt; &lt;h2 id=&quot;commentsh2&quot;&gt;Comments&lt;/h2&gt; &lt;div id=&quot;commentList&quot;&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;script&gt; // const remote = &quot;https://striver.nighthawkcodescrums.gq&quot;; const remote = &quot;http://127.0.0.1:5000&quot;; const quote = document.getElementById(&quot;quote&quot;); const quoteAuthor = document.getElementById(&quot;quoteAuthor&quot;); const likes = document.getElementById(&quot;likeCount&quot;); const dislikes = document.getElementById(&quot;dislikeCount&quot;); const commentList = document.getElementById(&quot;commentList&quot;); const commentName = document.getElementById(&quot;commentName&quot;); const commentText = document.getElementById(&quot;commentText&quot;); let currentQuoteID = -1; const incrementLikes = async () =&gt; { if (currentQuoteID === -1) return; const { likes: count } = await fetch(remote + &quot;/like&quot;, { method: &quot;POST&quot;, headers: { &quot;Content-Type&quot;: &quot;application/json&quot; }, body: JSON.stringify({ id: currentQuoteID }), }).then((r) =&gt; r.json()); likes.innerHTML = `${count}`; }; const incrementDislikes = async () =&gt; { if (currentQuoteID === -1) return; const { dislikes: count } = await fetch(remote + &quot;/dislike&quot;, { method: &quot;POST&quot;, headers: { &quot;Content-Type&quot;: &quot;application/json&quot; }, body: JSON.stringify({ id: currentQuoteID }), }).then((r) =&gt; r.json()); dislikes.innerHTML = `${count}`; }; const setComments = async (comments) =&gt; { commentList.innerHTML = &quot;&quot;; Object.entries(comments).forEach(([uuid, comment]) =&gt; { const el = document.createElement(&quot;div&quot;); el.innerHTML = `&lt;h4&gt;${comment[&quot;name&quot;]}&lt;/h4&gt; n`; el.innerHTML += `&lt;p&gt;${comment[&quot;message&quot;]}&lt;/p&gt; n`; el.innerHTML += ` &lt;button type=&quot;button&quot; class=&quot;btn btn-success&quot; onclick=&quot;likeComment(event)&quot; id=&quot;${uuid}&quot;&gt; &lt;span id=&quot;comment-${uuid}-likes&quot;&gt;${comment[&quot;likes&quot;]}&lt;/span&gt; &lt;i class=&quot;bi bi-hand-thumbs-up-fill&quot;&gt;&lt;/i&gt; &lt;/button&gt; n`; el.innerHTML += ` &lt;button type=&quot;button&quot; class=&quot;btn btn-danger&quot; onclick=&quot;dislikeComment(event)&quot; id=&quot;${uuid}&quot;&gt; &lt;span id=&quot;comment-${uuid}-dislikes&quot;&gt;${comment[&quot;dislikes&quot;]}&lt;/span&gt; &lt;i class=&quot;bi bi-hand-thumbs-down-fill&quot;&gt;&lt;/i&gt; &lt;/button&gt;`; el.className = &quot;mt-3 mb-1&quot;; commentList.appendChild(el); }); }; const getQuote = async () =&gt; { const res = await fetch(remote + &quot;/quote&quot;).then((r) =&gt; r.json()); currentQuoteID = Number.parseInt(Object.keys(res)[0]); const currentQuote = res[currentQuoteID]; likes.innerHTML = `${currentQuote[&quot;likes&quot;]}`; dislikes.innerHTML = `${currentQuote[&quot;dislikes&quot;]}`; const [msg, author] = currentQuote[&quot;quote&quot;].split(&quot;—&quot;).map((i) =&gt; i.trim()); quote.innerHTML = msg; quoteAuthor.innerHTML = author; setComments(currentQuote[&quot;comments&quot;]); }; const submitComment = async () =&gt; { if (currentQuoteID === -1) return; const { comments } = await fetch(remote + &quot;/addComment&quot;, { method: &quot;POST&quot;, headers: { &quot;Content-Type&quot;: &quot;application/json&quot; }, body: JSON.stringify({ id: currentQuoteID, name: commentName.value, message: commentText.value, }), }).then((r) =&gt; r.json()); setComments(comments); }; const likeComment = async (e) =&gt; { const commentId = e.currentTarget.id; const { likes: count } = await fetch(remote + &quot;/likeComment&quot;, { method: &quot;POST&quot;, headers: { &quot;Content-Type&quot;: &quot;application/json&quot; }, body: JSON.stringify({ quote_id: currentQuoteID, comment_id: commentId, }), }).then((r) =&gt; r.json()); document.getElementById(`comment-${commentId}-likes`).innerHTML = count; }; const dislikeComment = async (e) =&gt; { const commentId = e.currentTarget.id; const { likes: count } = await fetch(remote + &quot;/dislikeComment&quot;, { method: &quot;POST&quot;, headers: { &quot;Content-Type&quot;: &quot;application/json&quot; }, body: JSON.stringify({ quote_id: currentQuoteID, comment_id: commentId, }), }).then((r) =&gt; r.json()); document.getElementById(`comment-${commentId}-dislikes`).innerHTML = count; }; &lt;/script&gt; &lt;/body&gt; .",
          "url": "/striver-frontend/",
          "relUrl": "/",
          "date": ""
      }
      
  

  
  

  
  

  
  

  
  

  
  

  
      ,"page8": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "/striver-frontend/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}